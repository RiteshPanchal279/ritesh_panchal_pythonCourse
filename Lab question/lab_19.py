# 1. Implement a generator function fibonacci_generator that yields Fibonacci numbers indefinitely. Write a function sum_fibonacci that computes the sum of the first 10 Fibonacci numbers generated by this function.


def fibonacci_generator():
    a, b = 0, 1
    while True:
        yield a 
        a, b = b, a + b # here we are changing the value of a,b 

def sum_fibonacci(n=10):
    fib_nums = fibonacci_generator() # fibonacci_generator is return the object which is stored in fib_nums 
    return sum(next(fib_nums) for _ in range(n))

print(sum_fibonacci())




# 2.Define a generator function prime_number_generator that yields prime numbers indefinitely. Print the first 15 prime numbers generated by this function.

def is_prime(n):
# Helper function to check if a number is prime.
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def prime_number_generator():
    num=2
    while True:
         if is_prime(num):
            yield num
         num+=1


prime_nums = prime_number_generator()

first_15_primeNum = [next(prime_nums) for _ in range(15)]

print(first_15_primeNum)